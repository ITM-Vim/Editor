" Se background color scheme
set background=light
set cc=80
set t_Co=256
hi Normal guibg=NONE ctermbg=NONE
hi LineNr guibg=NONE ctermbg=NONE
hi SignColumn guibg=NONE ctermbg=NONE
hi EndOfBuffer guibg=NONE ctermbg=NONE
"colorscheme bubblegum
"colorscheme OceanicNext
"colorscheme OceanicNext
"colorscheme Tomorrow-Night
colorscheme neodark

" Transparent backgrounda {
    function! AdaptColorscheme()
       highlight clear CursorLine
       highlight Normal ctermbg=none
       highlight LineNr ctermbg=none
       highlight Folded ctermbg=none
       highlight NonText ctermbg=none
       highlight SpecialKey ctermbg=none
       highlight VertSplit ctermbg=none
       highlight SignColumn ctermbg=none
    endfunction
    autocmd ColorScheme * call AdaptColorscheme()

		highlight Normal guibg=NONE ctermbg=NONE
		highlight clear LineNr
		highlight clear SignColumn
" }


" CursorLineNr {
    if &term == 'xterm-256color' || &term == 'screen-256color'
        let &t_SI = "\<Esc>[6 q"
        let &t_SR = "\<Esc>[2 q"
        let &t_EI = "\<Esc>[3 q"
    else
        let &t_SR = "\<Esc>]50;CursorShape=0\x7"
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_EI = "\<Esc>]50;CursorShape=2\x7"
    endif


    if exists('$TMUX')
        "let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
        "let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
        "let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"

        let &t_SI = "\<Esc>[6 q"
        let &t_SR = "\<Esc>[2 q"
        let &t_EI = "\<Esc>[3 q"
    endif


    "Mode Settings {
        "let &t_SI.="\e[5 q" "SI = INSERT mode
        "let &t_SR.="\e[1 q" "SR = REPLACE mode
        "let &t_EI.="\e[4 q" "EI = NORMAL mode (ELSE)

        " Cursor settings:
        "  1 -> blinking block
        "  2 -> solid block
        "  3 -> blinking underscore
        "  4 -> solid underscore
        "  5 -> blinking vertical bar
        "  6 -> solid vertical bar
    " }
" }


" Setting up the directories {
    set backup                  " Backups are nice ...
    if has('persistent_undo')
      set undofile                " So is persistent undo ...
      set undolevels=1000         " Maximum number of changes that can be undone
      set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
    endif

    set backupdir=~/.vim/tmp/backup//
    set directory=~/.vim/tmp/swap//
    set undodir=~/.vim/tmp/undo//

    highlight clear SignColumn      " SignColumn should match background
    highlight clear LineNr          " Current line number row will have same background color in relative mode
    highlight clear CursorLineNr    " Remove highlight color from current line number
    set listchars=tab:›\ ,trail:•,extends:├,nbsp:. " Highlight problematic whitespace
"}

" Formatting {
    filetype plugin on
		" autocmd FileType python setlocal foldmethod=indent
		autocmd FileType c,cpp setlocal foldmethod=syntax
" }


if filereadable(expand("~/.settings.vim"))
    source ~/.settings.vim
endif
